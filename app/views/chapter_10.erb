      <div id="contentPane">

        <h1>
          10.&nbsp;&nbsp;Blocks and Procs
        </h1>
        <div class="fleur"><div class="fleur_stem">&nbsp;</div></div>
        <p>
                This is definitely one of the coolest features of Ruby.  Some
      other languages have this feature, though they may call it
      something else (like <dfn>closures</dfn>), but most of the
      more popular ones don't, and it's a shame.

        </p>
        <p>

                So what is this cool new thing?  It's the ability to take
      a <dfn>block</dfn> of code (code in between <span class="L2Pcode"><span class="L2Pkeyword">do</span></span>
      and <span class="L2Pcode"><span class="L2Pkeyword">end</span></span>), wrap it up in an object (called a
      <dfn>proc</dfn>), store it in a variable or pass it to a
      method, and run the code in the block whenever you feel
      like (more than once, if you want).  So it's kind of like
      a method itself, except that it isn't bound to an object
      (it <em>is</em> an object), and you can store it or pass
      it around like you can with any object.  I think it's example
      time:

        </p>

        <pre class="L2PcodeBlock">toast = Proc.new <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">Cheers!</span>'
<span class="L2Pkeyword">end</span>

toast.call
toast.call
toast.call</pre>
        <pre class="L2PoutputBlock">
Cheers!
Cheers!
Cheers!
</pre>

        <p>
                So I created a proc (which I think is supposed to be short for
      "procedure", but far more importantly, it rhymes with "block")
      which held the block of code, then I <span class="L2Pcode">call</span>ed the proc
      three times.  As you can see, it's a lot like a method.

        </p>
        <p>
                Actually, it's even more like a method than I have shown you, because
      blocks can take parameters:

        </p>
        <pre class="L2PcodeBlock">doYouLike = Proc.new <span class="L2Pkeyword">do</span> |aGoodThing|
  puts '<span class="L2Pstring">I *really* like </span>'+aGoodThing+'<span class="L2Pstring">!</span>'

<span class="L2Pkeyword">end</span>

doYouLike.call '<span class="L2Pstring">chocolate</span>'
doYouLike.call '<span class="L2Pstring">ruby</span>'</pre>
        <pre class="L2PoutputBlock">
I *really* like chocolate!
I *really* like ruby!
</pre>
        <p>
                Ok, so we see what blocks and procs are, and how to use them, but what's
      the point?  Why not just use methods?  Well, it's because there are some
      things you just can't do with methods.  In particular, you can't pass
      methods into other methods (but you can pass procs into methods), and methods
      can't return other methods (but they can return procs).  This is simply because
      procs are objects; methods aren't.

        </p>

        <p>
                (By the way, is any of this looking familiar?  Yep, you've seen blocks before... when
      you learned about iterators.  But let's talk more about that in a bit.)

        </p>
        <h2>
          Methods Which Take Procs
        </h2>
        <p>
                When we pass a proc into a method, we can control how, if, or how many times we call
      the proc.  For example, let's say there's something we want to do before and after
      some code is run:

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">doSelfImportantly</span> someProc
  puts '<span class="L2Pstring">Everybody just HOLD ON!  I have something to do...</span>'
  someProc.call
  puts '<span class="L2Pstring">Ok everyone, I\'m done.  Go on with what you were doing.</span>'

<span class="L2Pkeyword">end</span>

sayHello = Proc.new <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">hello</span>'
<span class="L2Pkeyword">end</span>

sayGoodbye = Proc.new <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">goodbye</span>'

<span class="L2Pkeyword">end</span>

doSelfImportantly sayHello
doSelfImportantly sayGoodbye</pre>
        <pre class="L2PoutputBlock">
Everybody just HOLD ON!  I have something to do...
hello
Ok everyone, I'm done.  Go on with what you were doing.
Everybody just HOLD ON!  I have something to do...
goodbye
Ok everyone, I'm done.  Go on with what you were doing.
</pre>
        <p>
                Maybe that doesn't appear particulary fabulous... but it is.  :-)
      It's all too common in programming to have strict requirements about what
      must be done when.  If you want to save a file, for example, you have to
      open the file, write out the information you want it to have, and then close
      the file.  If you forget to close the file, Bad Things(tm) can happen.  But
      each time you want to save or load a file, you have to do the same thing:
      open the file, do what you <em>really</em> want to do, then close the file.
      It's tedious and easy to forget.  In Ruby, saving (or loading) files works
      similarly to the code above, so you don't have to worry about anything but
      what you actually want to save (or load).  (In the next chapter I'll show you
      where to find out how to do things like save and load files.)

        </p>

        <p>
                You can also write methods which will determine how many times, or even
      <em>if</em> to call a proc.  Here's a method which will call the proc passed in
      about half of the time, and another which will call it twice:

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">maybeDo</span> someProc
  <span class="L2Pkeyword">if</span> rand(<span class="L2Pnumber">2</span>) == <span class="L2Pnumber">0</span>

    someProc.call
  <span class="L2Pkeyword">end</span>
<span class="L2Pkeyword">end</span>

<span class="L2Pkeyword">def</span> <span class="L2Pdefinition">twiceDo</span> someProc
  someProc.call
  someProc.call
<span class="L2Pkeyword">end</span>

wink = Proc.new <span class="L2Pkeyword">do</span>

  puts '<span class="L2Pstring">&lt;wink&gt;</span>'
<span class="L2Pkeyword">end</span>

glance = Proc.new <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">&lt;glance&gt;</span>'
<span class="L2Pkeyword">end</span>

maybeDo wink
maybeDo glance
twiceDo wink
twiceDo glance</pre>
        <pre class="L2PoutputBlock">
&lt;glance&gt;
&lt;wink&gt;
&lt;wink&gt;
&lt;glance&gt;
&lt;glance&gt;
</pre>
        <p>

                These are some of
      the more common uses of procs which enable us to do things we simply could not have done
      using methods alone.  Sure, you could write a method to wink twice, but you couldn't write
      one to just do <em>something</em> twice!

        </p>
        <p>
                Before we move on, let's look at one last example.  So far the procs
      we have passed in have been fairly similar to each other.  This time
      they will be quite different, so you can see how much such a method
      depends on the procs passed into it.  Our
      method will take some object and a proc, and will call the proc
      on that object.  If the proc returns false, we quit; otherwise
      we call the proc with the returned object.  We keep doing this
      until the proc returns false (which it had better do eventually,
      or the program will crash).  The method will return the last
      non-false value returned by the proc.

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">doUntilFalse</span> firstInput, someProc
  input  = firstInput
  output = firstInput
  
  <span class="L2Pkeyword">while</span> output
    input  = output
    output = someProc.call input
  <span class="L2Pkeyword">end</span>

  
  input
<span class="L2Pkeyword">end</span>

buildArrayOfSquares = Proc.new <span class="L2Pkeyword">do</span> |array|
  lastNumber = array.last
  <span class="L2Pkeyword">if</span> lastNumber &lt;= <span class="L2Pnumber">0</span>
    <span class="L2Pkeyword">false</span>

  <span class="L2Pkeyword">else</span>
    array.pop                         <span class="L2Pcomment">#  Take off the last number...</span>
    array.push lastNumber*lastNumber  <span class="L2Pcomment">#  ...and replace it with its square...</span>
    array.push lastNumber-<span class="L2Pnumber">1</span>           <span class="L2Pcomment">#  ...followed by the next smaller number.</span>

  <span class="L2Pkeyword">end</span>
<span class="L2Pkeyword">end</span>

alwaysFalse = Proc.new <span class="L2Pkeyword">do</span> |justIgnoreMe|
  <span class="L2Pkeyword">false</span>
<span class="L2Pkeyword">end</span>

puts doUntilFalse([<span class="L2Pnumber">5</span>], buildArrayOfSquares).inspect
puts doUntilFalse('<span class="L2Pstring">I\'m writing this at 3:00 am; someone knock me out!</span>', alwaysFalse)</pre>

        <pre class="L2PoutputBlock">
[25, 16, 9, 4, 1, 0]
I'm writing this at 3:00 am; someone knock me out!
</pre>
        <p>
                Ok, so that was a pretty weird example, I'll admit.  But it shows how differently
      our method acts when given very different procs.

        </p>
        <p>
                The <span class="L2Pcode">inspect</span> method is a lot like <span class="L2Pcode">to_s</span>, except
      that the string it returns tries to show you the ruby code for
      building the object you passed it.  Here it shows us the whole
      array returned by our first call to <span class="L2Pcode">doUntilFalse</span>.  Also, you might
      notice that we never actually squared that <span class="L2Pcode"><span class="L2Pnumber">0</span></span> on the end of that
      array, but since <span class="L2Pcode"><span class="L2Pnumber">0</span></span> squared is still just <span class="L2Pcode"><span class="L2Pnumber">0</span></span>, we didn't have to.
      And since <span class="L2Pcode">alwaysFalse</span> was, you know, always <span class="L2Pcode"><span class="L2Pkeyword">false</span></span>,
      <span class="L2Pcode">doUntilFalse</span> didn't do anything at all the second time we
      called it; it just returned what was passed in.

        </p>

        <h2>
          Methods Which Return Procs
        </h2>
        <p>
                One of the other cool things you can do with procs is to create
      them in methods and return them.  This allows all sorts of crazy
      programming power (things with impressive names, like
      <dfn>lazy evaluation</dfn>, <dfn>infinite data structures</dfn>,
      and <dfn>currying</dfn>),
      but the fact is that I almost never do this in practice, nor
      can I remember seeing anyone else do this in their code.  I think
      it's the kind of thing you don't usually end up having to do in Ruby,
      or maybe Ruby just encourages you to find other solutions; I don't
      know.  In any case, I will only touch on this briefly.

        </p>
        <p>

                In this example, <span class="L2Pcode">compose</span> takes two procs and returns a new
      proc which, when called, calls the first proc and passes its result
      into the second proc.

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">compose</span> proc1, proc2
  Proc.new <span class="L2Pkeyword">do</span> |x|
    proc2.call(proc1.call(x))
  <span class="L2Pkeyword">end</span>

<span class="L2Pkeyword">end</span>

squareIt = Proc.new <span class="L2Pkeyword">do</span> |x|
  x * x
<span class="L2Pkeyword">end</span>

doubleIt = Proc.new <span class="L2Pkeyword">do</span> |x|
  x + x
<span class="L2Pkeyword">end</span>

doubleThenSquare = compose doubleIt, squareIt
squareThenDouble = compose squareIt, doubleIt

puts doubleThenSquare.call(<span class="L2Pnumber">5</span>)
puts squareThenDouble.call(<span class="L2Pnumber">5</span>)</pre>
        <pre class="L2PoutputBlock">
100
50
</pre>
        <p>
                Notice that the call to <span class="L2Pcode">proc1</span> had to be inside the
      parentheses for <span class="L2Pcode">proc2</span> in order for it to be done first.

        </p>

        <h2>
          Passing Blocks (Not Procs) into Methods
        </h2>
        <p>
                Ok, so this has been sort of academically interesting, but also
      sort of a hassle to use.  A lot of the problem is that there are
      three steps you have to go through (defining the method, making
      the proc, and calling the method with the proc), when it sort of
      feels like there should only be two (defining the method, and
      passing the <em>block</em> right into the method, without using
      a proc at all), since most of the time you don't want to use the
      proc/block after you pass it into the method.  Well, wouldn't you
      know, Ruby has it all figured out for us!  In fact, you've already
      been doing it every time you use iterators.

        </p>
        <p>
                I'll show you a quick example first, then we'll talk about it.

        </p>

        <pre class="L2PcodeBlock"><span class="L2Pkeyword">class</span> <span class="L2Pdefinition">Array</span>
  
  <span class="L2Pkeyword">def</span> <span class="L2Pdefinition">eachEven</span>(&amp;wasABlock_nowAProc)
    isEven = <span class="L2Pkeyword">true</span>  <span class="L2Pcomment">#  We start with &quot;true&quot; because arrays start with 0, which is even.</span>

    
    <span class="L2Pkeyword">self</span>.each <span class="L2Pkeyword">do</span> |object|
      <span class="L2Pkeyword">if</span> isEven
        wasABlock_nowAProc.call object
      <span class="L2Pkeyword">end</span>
      
      isEven = (<span class="L2Pkeyword">not</span> isEven)  <span class="L2Pcomment">#  Toggle from even to odd, or odd to even.</span>

    <span class="L2Pkeyword">end</span>
  <span class="L2Pkeyword">end</span>

<span class="L2Pkeyword">end</span>

['<span class="L2Pstring">apple</span>', '<span class="L2Pstring">bad apple</span>', '<span class="L2Pstring">cherry</span>', '<span class="L2Pstring">durian</span>'].eachEven <span class="L2Pkeyword">do</span> |fruit|
  puts '<span class="L2Pstring">Yum!  I just love </span>'+fruit+'<span class="L2Pstring"> pies, don\'t you?</span>'

<span class="L2Pkeyword">end</span>

<span class="L2Pcomment">#  Remember, we are getting the even-numbered elements</span>
<span class="L2Pcomment">#  of the array, all of which happen to be odd numbers,</span>
<span class="L2Pcomment">#  just because I like to cause problems like that.</span>
[<span class="L2Pnumber">1</span>, <span class="L2Pnumber">2</span>, <span class="L2Pnumber">3</span>, <span class="L2Pnumber">4</span>, <span class="L2Pnumber">5</span>].eachEven <span class="L2Pkeyword">do</span> |oddBall|
  puts oddBall.to_s+'<span class="L2Pstring"> is NOT an even number!</span>'

<span class="L2Pkeyword">end</span></pre>
        <pre class="L2PoutputBlock">
Yum!  I just love apple pies, don't you?
Yum!  I just love cherry pies, don't you?
1 is NOT an even number!
3 is NOT an even number!
5 is NOT an even number!
</pre>
        <p>
                So to pass in a block to <span class="L2Pcode">eachEven</span>, all we had to do was stick
      the block after the method.  You can pass a block into any method this
      way, though many methods will just ignore the block.  In order to make
      your method <em>not</em> ignore the block, but grab it and turn it into
      a proc, put the name of the proc at the end of your method's parameter
      list, preceded by an ampersand (<span class="L2Pcode">&amp;</span>).  So that part is a little
      tricky, but not too bad, and you only have to do that once (when you
      define the method).  Then you can use the method over and over again,
      just like the built-in methods which take blocks, like <span class="L2Pcode">each</span>

      and <span class="L2Pcode">times</span>.  (Remember <span class="L2Pcode"><span class="L2Pnumber">5</span>.times&nbsp;<span class="L2Pkeyword">do</span></span>...?)

        </p>
        <p>
                If you get confused, just remember what <span class="L2Pcode">eachEven</span> is supposed to do:  call
      the block passed in with every other element in the array.  Once
      you've written it and it works, you don't need to think about what it's
      actually doing under the hood ("which block is called when??"); in
      fact, that's exactly <em>why</em> we write methods like this:  so we
      never have to think about how they work again.  We just use them.

        </p>

        <p>
                I remember one time I wanted to be able to time how long different
      sections of a program were taking.  (This is also known as
      <dfn>profiling</dfn> the code.)  So I wrote a method which takes
      the time before running the code, then it runs it, then it takes
      the time again at the end and figures out the difference.  I can't
      find the code right now, but I don't need it; it probably
      went something like this:

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">profile</span> descriptionOfBlock, &amp;block
  startTime = Time.now
  
  block.call
  
  duration = Time.now - startTime
  
  puts descriptionOfBlock+'<span class="L2Pstring">:  </span>'+duration.to_s+'<span class="L2Pstring"> seconds</span>'

<span class="L2Pkeyword">end</span>

profile '<span class="L2Pstring">25000 doublings</span>' <span class="L2Pkeyword">do</span>
  number = <span class="L2Pnumber">1</span>
  
  <span class="L2Pnumber">25000</span>.times <span class="L2Pkeyword">do</span>

    number = number + number
  <span class="L2Pkeyword">end</span>
  
  puts number.to_s.length.to_s+'<span class="L2Pstring"> digits</span>'  <span class="L2Pcomment">#  That is, the number of digits in this HUGE number.</span>
<span class="L2Pkeyword">end</span>

profile '<span class="L2Pstring">count to a million</span>' <span class="L2Pkeyword">do</span>

  number = <span class="L2Pnumber">0</span>
  
  <span class="L2Pnumber">1000000</span>.times <span class="L2Pkeyword">do</span>
    number = number + <span class="L2Pnumber">1</span>
  <span class="L2Pkeyword">end</span>
<span class="L2Pkeyword">end</span></pre>

        <pre class="L2PoutputBlock">
7526 digits
25000 doublings:  0.246768 seconds
count to a million:  0.90245 seconds
</pre>
        <p>
                How simple!  How elegant!  With that tiny method,
      I can now easily time any section of any program that I want to; I
      just throw the code in a block and send it to <span class="L2Pcode">profile</span>.
      What could be simpler?  In most languages, I would have to explicitly
      add that timing code (the stuff in <span class="L2Pcode">profile</span>) around every
      section which I wanted to time.  In Ruby, however, I get to keep it
      all in one place, and (more importantly) out of my way!

        </p>
        <h2>
          A Few Things to Try
        </h2>

        <p>
                &bull; <em>Grandfather Clock</em>.  Write a method which takes a block
      and calls it once for each hour that has passed today.  That way, if I
      were to pass in the block <span class="L2Pcode"><span class="L2Pkeyword">do</span>&nbsp;puts&nbsp;'<span class="L2Pstring">DONG!</span>'&nbsp;<span class="L2Pkeyword">end</span></span>, it would chime
      (sort of) like a grandfather clock.  Test your method
      out with a few different blocks (including the one I just gave you).
      <em><strong>Hint:</strong>  You can use
      </em><span class="L2Pcode">Time.now.hour</span><em> to get the current hour.
      However, this returns a number between </em><span class="L2Pcode"><span class="L2Pnumber">0</span></span><em> and </em><span class="L2Pcode"><span class="L2Pnumber">23</span></span><em>,
      so you will have to alter those numbers in order to get ordinary clock-face
      numbers (</em><span class="L2Pcode"><span class="L2Pnumber">1</span></span><em> to </em><span class="L2Pcode"><span class="L2Pnumber">12</span></span><em>).</em>

        </p>
        <p>
                &bull; <em>Program Logger</em>.  Write a method called <span class="L2Pcode">log</span>, which
      takes a string description of a block and, of course, a block.  Similar to
      <span class="L2Pcode">doSelfImportantly</span>, it should <span class="L2Pcode">puts</span> a string telling
      that it has started the block, and another string at the end telling you
      that it has finished the block, and also telling you what the block returned.
      Test your method by sending it a code block.  Inside the block, put <em>another</em>

      call to <span class="L2Pcode">log</span>, passing another block to it.  (This is called
      <dfn>nesting</dfn>.)  In other words, your output should look something like this:

        </p>
        <pre class="L2PoutputBlock">Beginning "outer block"...
Beginning "some little block"...
..."some little block" finished, returning:  5
Beginning "yet another block"...
..."yet another block" finished, returning:  I like Thai food!
..."outer block" finished, returning:  false
</pre>
        <p>
                &bull; <em>Better Logger</em>.  The output from that last logger was kind
      of hard to read, and it would just get worse the more you used it.  It would
      be so much easier to read if it indented the lines in the inner blocks.  To
      do this, you'll need to keep track of how deeply nested you are every time
      the logger wants to write something.  To do this, use a <dfn>global variable</dfn>,
      a variable you can see from anywhere in your code.  To make a global variable,
      just precede your variable name with <span class="L2Pcode">$</span>, like these:
      <span class="L2Pcode">$global</span>, <span class="L2Pcode">$nestingDepth</span>, and <span class="L2Pcode">$bigTopPeeWee</span>.
      In the end, your logger should output code like this:

        </p>

        <pre class="L2PoutputBlock">Beginning "outer block"...
  Beginning "some little block"...
    Beginning "teeny-tiny block"...
    ..."teeny-tiny block" finished, returning:  lots of love
  ..."some little block" finished, returning:  42
  Beginning "yet another block"...
  ..."yet another block" finished, returning:  I love Indian food!
..."outer block" finished, returning:  true
</pre>
        <p>
                Well, that's about all you're going to learn from this tutorial.
      Congratulations!  You've learned a <em>lot</em>!  Maybe you don't feel
      like you remember everything, or you skipped over some parts... really,
      that's just fine.  Programming isn't about what you know; it's about
      what you can figure out.  As long as you know where to find out the
      things you forgot, you're doing just fine.  I hope you don't think
      that I wrote all of this without looking things up every other minute!
      Because I did.  I also got a lot of help with the code which runs all
      of the examples in this tutorial.  But where was <em>I</em> looking
      stuff up, and who was <em>I</em> asking for help?
      <a href="/LearnToProgram/?Chapter=11">Let me show you...</a>

        </p>
        <div class="fleur"><div class="fleur_stem">&nbsp;</div></div>
        <p style="padding-bottom: 20px;">
          &copy; 2003-2009 Chris Pine
        </p>
      </div>

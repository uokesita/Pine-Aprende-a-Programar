      <div id="contentPane">

        <h1>
          11.&nbsp;&nbsp;Beyond This Tutorial
        </h1>
        <div class="fleur"><div class="fleur_stem">&nbsp;</div></div>
        <p>
                So where do we go now?  If you have a question, who can you
      ask?  What if you want your program to open a webpage, send
      an email, or resize a digital picture?  Well, there are many,
      many places to find Ruby help.  Unfortunately,
      that's sort of unhelpful, isn't it?  :-)

        </p>
        <p>
                For me, there are really only three places I look for Ruby help.
      If it's a small question, and I think I can experiment on my own
      to find the answer, I use <dfn>irb</dfn>.  If it's a bigger question,
      I look it up in my <dfn>pickaxe</dfn>.  And if I just can't figure
      it out on my own, then I ask for help on <dfn>ruby-talk</dfn>.

        </p>

        <h2>
          IRB:  Interactive Ruby
        </h2>
        <p>
                If you installed Ruby, then you installed irb.  To use it, just
      go to your command prompt and type <span class="L2Pinput">irb</span>.  When you are
      in irb, you can type in any ruby expression you want, and it will tell you
      the value of it.  Type in <span class="L2Pinput">1&nbsp;+&nbsp;2</span>, and it will tell you
      <span class="L2Pcode L2PcodeBG" style="padding-right: 3px; padding-left: 3px;">3</span>.  (Note that you don't have to use <span class="L2Pcode">puts</span>.)
      It's kind of like a giant Ruby calculator.  When you are done,
      just type in <span class="L2Pinput">exit</span>.

        </p>

        <p>
                There's a lot more to irb than this, but you can learn all about
      it in the pickaxe.

        </p>
        <h2>
          The Pickaxe:  "Programming Ruby"
        </h2>
        <p>
                Absolutely <em>the</em> Ruby book to get is "Programming Ruby,
      The Pragmatic Programmer's Guide", by David Thomas and Andrew
      Hunt (the Pragmatic Programmers).  While I highly recommend
      picking up the
      <a href="http://www.pragprog.com/titles/ruby/programming-ruby">2nd edition</a>

      of this excellent book, with all of
      the latest Ruby covered, you can also get a slightly older
      (but still mostly relevant) version for free online.
      (Actually, if you installed the
      Windows version of Ruby, you already have it.)

        </p>
        <p>
                You can find just about everything about Ruby, from the basic
      to the advanced, in this book.  It's easy to read; it's comprehensive;
      it's just about perfect.  I wish every language had a book of
      this quality.  At the back of the book, you'll find a huge section
      detailing every method in every class, explaining it and giving
      examples.  I just love this book!

        </p>
        <p>
                There are a number of places you can get it (including
      the Pragmatic Programmers' own site), but my favorite place
      is at <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/">ruby-doc.org</a>.
      That version has a nice table of contents on the side,
      as well as an index.  (ruby-doc.org has lots of other
      great documentation as well, such as for the Core API and
      Standard Library... basically, it documents everything Ruby
      comes with right out of the box.
      <a href="http://www.ruby-doc.org/">Check it out.</a>)

        </p>

        <p>
                And why is it called "the pickaxe"?  Well, there's a picture
      of a pickaxe on the cover of the book.  It's a silly name, I
      guess, but it stuck.

        </p>
        <h2>
          Ruby-Talk:  the Ruby Mailing List
        </h2>
        <p>
                Even with irb and the pickaxe, sometimes you still can't figure
      it out.  Or perhaps you want to know if someone already did
      whatever it is you are working on, to see if you could use it
      instead.  In these cases, the place to go is ruby-talk, the Ruby
      Mailing List.  It's full of friendly, smart, helpful people.
      To learn more about it, or to subscribe, look
      <a href="http://www.ruby-lang.org/en/community/mailing-lists/">here</a>.

        </p>

        <p>
                <strong>WARNING:</strong>  There's a <em>lot</em> of mail on the
      mailing list every day.  I have mine automatically sent to a
      different mail folder so that it doesn't get in my way.  If you
      just don't want to deal with all that mail, though, you don't
      have to!  The ruby-talk mailing list is mirrored to the newsgroup
      comp.lang.ruby, and vice versa, so you can see the same messages
      there.  Either way, you see the same messages, just in a slightly
      different format.

        </p>
        <h2>
          Tim Toady
        </h2>
        <p>

                Something I have tried to shield you from, but which you will
      surely run in to soon, is the concept of TMTOWTDI (pronounced
      "Tim Toady"):  There's More Than One Way To Do It.

        </p>
        <p>
                Now some will tell you what a wonderful thing TMTOWTDI is, while
      others feel quite differently.  I don't really have strong feelings
      about it in general, but I think it's a <em>terrible</em> way to
      teach someone how to program.  (As if learning one way to do something
      wasn't challenging and confusing enough!)

        </p>
        <p>
                However, now that you are moving beyond this tutorial, you'll
      be seeing much more diverse code.  For example, I can think of
      at least five other ways to make a string (aside from surrounding
      some text in single quotes), and each one works slightly differently.
      I only showed you the simplest of the six.

        </p>
        <p>

                And when we talked about branching, I showed you <span class="L2Pcode"><span class="L2Pkeyword">if</span></span>,
      but I didn't show you <span class="L2Pcode"><span class="L2Pkeyword">unless</span></span>.  I'll let you figure
      that one out in irb.

        </p>
        <p>
                Another nice little shortcut you can use with <span class="L2Pcode"><span class="L2Pkeyword">if</span></span>,
      <span class="L2Pcode"><span class="L2Pkeyword">unless</span></span>, and <span class="L2Pcode"><span class="L2Pkeyword">while</span></span>, is the cute one-line version:

        </p>

        <pre class="L2PcodeBlock"><span class="L2Pcomment">#  These words are from a program I wrote to generate</span>
<span class="L2Pcomment">#  English-like babble.  Cool, huh?</span>
puts '<span class="L2Pstring">grobably combergearl kitatently thememberate</span>' <span class="L2Pkeyword">if</span> <span class="L2Pnumber">5</span> == <span class="L2Pnumber">2</span>**<span class="L2Pnumber">2</span> + <span class="L2Pnumber">1</span>**<span class="L2Pnumber">1</span>

puts '<span class="L2Pstring">enlestrationshifter supposine follutify blace</span>' <span class="L2Pkeyword">unless</span> '<span class="L2Pstring">Chris</span>'.length == <span class="L2Pnumber">5</span></pre>
        <pre class="L2PoutputBlock">
grobably combergearl kitatently thememberate
</pre>
        <p>
                And finally, there is another way of writing methods which take blocks
      (not procs).  We saw the thing where we grabbed the block and turned
      it into a proc using the <span class="L2Pcode">&amp;block</span> trick in your parameter list
      when you define the function.  Then, to call the block, you just use
      <span class="L2Pcode">block.call</span>.  Well, there's a shorter way (though I personally
      find it more confusing).  Instead of this:

        </p>

        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">doItTwice</span>(&amp;block)
  block.call
  block.call
<span class="L2Pkeyword">end</span>

doItTwice <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">murditivent flavitemphan siresent litics</span>'
<span class="L2Pkeyword">end</span></pre>

        <pre class="L2PoutputBlock">
murditivent flavitemphan siresent litics
murditivent flavitemphan siresent litics
</pre>
        <p>
                ...you do this:

        </p>
        <pre class="L2PcodeBlock"><span class="L2Pkeyword">def</span> <span class="L2Pdefinition">doItTwice</span>
  <span class="L2Pkeyword">yield</span>

  <span class="L2Pkeyword">yield</span>
<span class="L2Pkeyword">end</span>

doItTwice <span class="L2Pkeyword">do</span>
  puts '<span class="L2Pstring">buritiate mustripe lablic acticise</span>'
<span class="L2Pkeyword">end</span></pre>
        <pre class="L2PoutputBlock">

buritiate mustripe lablic acticise
buritiate mustripe lablic acticise
</pre>
        <p>
                I don't know... what do you think?  Maybe it's just me, but...
      <span class="L2Pcode"><span class="L2Pkeyword">yield</span></span>?!  If it was something like <span class="L2Pcode">call_the_hidden_block</span>
      or something, that would make a <em>lot</em> more sense to me.
      A lot of people say <span class="L2Pcode"><span class="L2Pkeyword">yield</span></span> makes sense to them.  But
      I guess that's what TMTOWTDI is all about:  they do it their way,
      and I'll do it my way.

        </p>

        <h2>
          THE END
        </h2>
        <p>
                Use it for good and not evil.  :-)  And if you found this tutorial
      useful (or confusing, or if you found an error),
      <a href="mailto:chris@pine.fm">let me know</a>!

        </p>
        <div class="fleur"><div class="fleur_stem">&nbsp;</div></div>
        <p style="padding-bottom: 20px;">
          &copy; 2003-2009 Chris Pine
        </p>

      </div>

